#! /usr/bin/perl
#
#	--file <config_file>
#		where <config_file> is the filename of the context config file.
#

use Getopt::Long;
use File::Copy;

print "Entering configure process of YARP device drivers...\n";

$yarp_root = $ENV{'YARP_ROOT'};
if (!defined($yarp_root))
{
	die "YARP_ROOT environment variable must be defined!\nto point to the path of the yarp source distribution\n";
}

require "$yarp_root/conf/configure.template.pl" or die "Can't find template file $yarp_root/conf/configure.template.pl\n";

my $exp_os = check_os();

print "Ready to start...\n";

my $config_file = "$yarp_root/conf/context.conf";
my %options = ();

GetOptions ('file=s' => \$config_file );

if (-e $config_file)
{
	copy ($config_file, "$config_file.old") or warn "Can't copy $config_file, old file might be overwritten\n";

	load_config_file (\%options, $config_file);
}

#
#
#
my $os = $options{"Architecture<-OS"};

#
#
#
print "Now I'm going to ask a few questions that I need for configuring the device drivers.\n";
print "For pathnames you can use (type) the pre-defined value \$YARP_ROOT ";
print "that I've verified as: \"$yarp_root\"\n\n";
print "Please, use always the forward slash as a separator!\n";

print "I determined already that you're running on a supported OS: $exp_os\n";
die "Cross-compile is not supported, the auto-detected OS must be also selected\n" if ($os ne $exp_os);

print "I also imagine you've compiled YARP_OS, I'm not checking for it so please ";
print "make sure you've run \"configure.pl\" and \"build.pl\" for YARP_OS.\n\n";

print "You are going to provide information on your hardware configuration here. ";
print "If this procedure isn't clear to you, please, have a look at the documentation\n";

print "To start, provide a name for your hardware context. This will be merged with the ";
print "OS name to provide our installation means of distinguishing this specific hardware\n\n";

get_option_hash ("Architecture<-Hardware_Name", "null", "What is your hardware name?", 0, \%options);
print "Then your context specific directories are going to be called: \"$options{\"Architecture<-Hardware_Name\"}\"\n";

print "These are the standard flags for compiling the library\n";

get_option_hash ("Compile_Dev<-Lib_Clean", "FALSE", "Clean first: i.e. rebuild libraries?", 1, \%options);
get_option_hash ("Compile_Dev<-Lib_Debug", "FALSE", "Compile debug version?", 1, \%options);
get_option_hash ("Compile_Dev<-Lib_Release", "FALSE", "Compile release (optimized)?", 1, \%options);
get_option_hash ("Compile_Dev<-Lib_Install", "FALSE", "Install after build?", 1, \%options);

if ($options{"Compile_Dev<-Lib_Clean"} eq "TRUE" &&
	$options{"Compile_Dev<-Lib_Debug"} eq "FALSE" &&
	$options{"Compile_Dev<-Lib_Release"} eq "FALSE" &&
	$options{"Compile_Dev<-Lib_Install"} eq "TRUE")
{
	print "Asked to clean and install but not to rebuild anything, I assume debug compile\n";
	$options{"Compile_Dev<-Lib_Debug"} = "TRUE";
}

print "Browsing through the list of available device drivers\n";
print "In case you don't know what to do, it's no harm including all available drivers\n";

# this calls the main construction functions.
if ($os eq "winnt")
{
	generate_dsp_project();
}
elsif ($os eq "linux" || $os eq "qnx6")
{
	generate_makefile_project();
}

print "We're done for now, the context file has been updated: \"$config_file\"\n";
print "A new project reflecting your choices has been created in \"./src\"\n";
print "Type \"build.pl\" later to start the build process\n\n";

print "Now I need to create a few additional include files\n";
print "I might need to ask you more questions...\n\n";

my $robotname = $options{"Architecture<-Hardware_Name"};

if (-d "$yarp_root/conf/$robotname" &&
	-d "$yarp_root/src/libYARP_robot/$robotname")
{
	print "Good! It seems you have the right directories for the hardware context you've just chosen\n";
}
else
{
	print "The context you have chosen seems to be a new one, ";
	print "you can't probably use certain hardware support features automatically. ";
	print "You can still of course generate your own classes to support the ";
	print "same features, please have a look at documentation\n";
}

if (-e "$yarp_root/conf/$robotname/YARPConfig_$robotname.h")
{
	print "Generating \"YARPConfigRobot.h\"\n";

	print "Copying $yarp_root/conf/$robotname/YARPConfig_$robotname.h.\n";
	copy ("$yarp_root/conf/$robotname/YARPConfig_$robotname.h", "$yarp_root/include/yarp/") or die "Can't copy $yarp_root/conf/$robotname/YARPConfig_$robotname.h\n";

	if (-e "$yarp_root/conf/licence.short.template")
	{
		# copies the licence file first.
		copy ("$yarp_root/conf/licence.short.template", "$yarp_root/include/yarp/YARPConfigRobot.h");
		open CONFIG, ">> $yarp_root/include/yarp/YARPConfigRobot.h";
	}
	else
	{
		open CONFIG, "> $yarp_root/include/yarp/YARPConfigRobot.h";
	}

	print CONFIG "\n";

	print CONFIG "///\n/// Generated by <configure.pl>\n///\n\n\n";

	print CONFIG "#ifndef __YARPConfigRoboth__\n";
	print CONFIG "#define __YARPConfigRoboth__\n\n\n";
	print CONFIG "#include <yarp/YARPConfig_$robotname.h>\n";

	if (-e "$yarp_root/conf/$robotname/YARPVocab_$robotname.h")
	{
		print "You've got also a \"vocab\" file for YARPBottles, I'm including it.\n";
		print CONFIG "#include <yarp/YARPVocab_$robotname.h>\n";
		copy ("$yarp_root/conf/$robotname/YARPVocab_$robotname.h", "$yarp_root/include/yarp/");
	}

	print CONFIG "\n#endif\n\n";
	close CONFIG;
}
else
{
	print "I can't create anything but an empty \"YARPConfigRobot.h\" file\n";
	print "This is not necessarily an issue, just be aware of what you get\n";

	if (-e "$yarp_root/conf/licence.short.template")
	{
		# copies the licence file first.
		copy ("$yarp_root/conf/licence.short.template", "$yarp_root/include/yarp/YARPConfigRobot.h");
		open CONFIG, ">> $yarp_root/include/yarp/YARPConfigRobot.h";
	}
	else
	{
		open CONFIG, "> $yarp_root/include/yarp/YARPConfigRobot.h";
	}

	print CONFIG "\n";

	print CONFIG "///\n/// Generated by <configure.pl>\n///\n\n\n";

	print CONFIG "#ifndef __YARPConfigRoboth__\n";
	print CONFIG "#define __YARPConfigRoboth__\n\n\n";
	print CONFIG "/// <ADD HERE YOUR SPECIFIC HEADERS>";

	print CONFIG "\n#endif\n\n";
	close CONFIG;
}


#
# creating the new config file.
# 
save_config_file (\%options, $config_file);

print "Done!\n";

#
# function to create a new makefile project.
#
sub generate_makefile_project
{
	open MODEL, "Makefile.model" or die "Can't open model Makefile: $!\n";
	open PROJECT, ">Makefile" or die "Can't open destination project Makefile: $!\n";

	while (<MODEL>)
	{
		if (/SUBDIRS =/)
		{
			print PROJECT "SUBDIRS = ";

			foreach my $device (glob "*")
			{
				if (-d "$device/$os/yarp" && -e "$device/Makefile")
				{
					print "Would you like to add \"$device\" to the project [YES]? ";
					chomp(my $answer = <STDIN>);
					if ($answer =~ /\b[YyTt1]\w*/ || $answer eq '')
					{
						$options{"Compile_Dev<-DD_$device"} = "YES";
						print PROJECT "$device ";
					}
					else
					{
						$options{"Compile_Dev<-DD_$device"} = "NO";
					}
				}
			}
			
			print PROJECT "src\n";
		}
		else
		{
			print PROJECT $_;
		}
	}

	close MODEL;
	close PROJECT;

	open MODEL, "./src/Makefile.model" or die "Can't open model src/Makefile: $!\n";
	open PROJECT, ">./src/Makefile" or die "Can't open destination project src/Makefile: $!\n";

	while (<MODEL>)
	{
		if (/TARGETS \+=/)
		{
			print PROJECT "TARGETS += ";

			foreach my $device (glob "*")
			{
				if (-d "$device/$os/yarp" && -e "$device/Makefile" && $options{"Compile_Dev<-DD_$device"} eq "YES")
				{
					foreach my $filename (glob "./$device/$os/yarp/*.cpp")
					{
						if ($filename =~ /(YARP[\w\s_]+.)cpp/)
						{
							print PROJECT "../obj/$os/$1o ";
						}
					}
				}
			}
			
			print PROJECT "\n";
		}
		else
		{
			print PROJECT $_;
		}
	}

	close MODEL;
	close PROJECT;
}

#
# function to create a new visual c++ project.
#
sub generate_dsp_project
{
	open PROJECT, "./src/libYARP_dev.dsp" or die "Can't open project file: $!\n";
	$newname = "libYARP_dev_$options{\"Architecture<-Hardware_Name\"}";
	open MYPROJECT, "> ./src/$newname.dsp" or die "Can't open output project file: $!\n";

	my $stop_copying = 0;

	while (<PROJECT>)
	{
		s/libYARP_dev/$newname/g;
		if (/# Name "$newname - Win32 Debug"/)
		{
			print MYPROJECT $_;
			$stop_copying = 1;
		}
		elsif (/# Begin Group "Source Files"/)
		{
			print MYPROJECT $_;
			my $line = undef;
			while (1)
			{
				$line = <PROJECT>;
				print MYPROJECT $line;
				if ($line =~ /^# End Group/)
				{
					last;
				}
			}
		}
		elsif (/# Begin Group "Header Files"/)
		{
			print MYPROJECT $_;
			my $line = undef;
			while (1)
			{
				$line = <PROJECT>;
				print MYPROJECT $line;
				if ($line =~ /^# End Group/)
				{
					last;
				}
			}
		}
		else
		{
			if (!$stop_copying)
			{
				print MYPROJECT $_;
			}
		}
	}

	foreach my $device (glob "*")
	{
		if (-d "$device/$os/yarp")
		{
			print "Would you like to add \"$device\" to the project [YES]? ";
			chomp(my $answer = <STDIN>);
			if ($answer =~ /\b[YyTt1]\w*/ || $answer eq '')
			{
				$options{"Compile_Dev<-DD_$device"} = "YES";
				print MYPROJECT "# Begin Group \"$device\"\r\n\r\n";
				print MYPROJECT "# PROP Default_Filter \"h;cpp\"\r\n";
				
				foreach my $file (glob "$device/$os/yarp/*.cpp $device/$os/yarp/*.h")
				{
					print MYPROJECT "# Begin Source File\r\n\r\n";
					$file =~ s#/#\\#g;
					my $line = "SOURCE=..\\$file\r\n";
					print MYPROJECT "$line";
					print MYPROJECT "# End Source File\r\n";
				}
	
				print MYPROJECT "# End Group\r\n";
			}
			else
			{
				$options{"Compile_Dev<-DD_$device"} = "NO";
			}
		}
	}
	
	print MYPROJECT "# End Target\n\r# End Project\r\n";

	close MYPROJECT;
	close PROJECT;
}

