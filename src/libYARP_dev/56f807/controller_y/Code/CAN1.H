/** ###################################################################
**     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : CAN1.H
**     Project   : controller_y
**     Processor : 56F807
**     Beantype  : MotorolaCAN
**     Version   : Bean 02.259, Driver 01.01, CPU db: 2.71.191
**     Compiler  : Metrowerks DSP C Compiler
**     Date/Time : 12/21/2004, 1:01 PM
**     Abstract  :
**         This bean "MotorolaCAN" implements an CAN serial channel.
**     Settings  :
**         CAN channel                 : MSCAN
**
**         Protocol
**             Time segment 1          : 10
**             Time segment 2          : 7
**             RSJ                     : 1
**
**             Recieve accept. code    : 0
**             Recieve accept. mask    : 0
**
**
**     Contents  :
**         SetAcceptanceCode - byte CAN1_SetAcceptanceCode(dword Mask);
**         SetAcceptanceMask - byte CAN1_SetAcceptanceMask(dword Mask);
**         SetAcceptanceMode - byte CAN1_SetAcceptanceMode(byte Mode);
**         SendFrame         - byte CAN1_SendFrame(byte BufferNum,dword MessageID,byte FrameType,byte Length...
**         ReadFrame         - byte CAN1_ReadFrame(dword *MessageID,byte *FrameType,byte *FrameFormat,byte *...
**         GetStateTX        - byte CAN1_GetStateTX(void);
**         GetStateRX        - bool CAN1_GetStateRX(void);
**         GetError          - byte CAN1_GetError(CAN1_TError *Err);
**
**     (c) Copyright UNIS, spol. s r.o. 1997-2002
**     UNIS, spol. s r.o.
**     Jundrovska 33
**     624 00 Brno
**     Czech Republic
**     http      : www.processorexpert.com
**     mail      : info@processorexpert.com
** ###################################################################*/

#ifndef __CAN1
#define __CAN1

#include "Cpu.h"

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

/* MODULE CAN1. */

#ifndef __BWUserType_CAN1_TError
#define __BWUserType_CAN1_TError
  typedef union {
    word err;
    struct {
      bool OverRun : 1;                /* Overrun error flag */
      bool : 1;
      bool : 1;
      bool BusOff : 1;                 /* Bus-off state */
      bool TxPassive : 1;              /* Transmitter error passive */
      bool RxPassive : 1;              /* Reciver error passive */
      bool TxWarning : 1;              /* Transmitter warning */
      bool RxWarning : 1;              /* Receiver warning */
    }errName;
  } CAN1_TError;                       /* Error flags. For languages which don't support bit access is byte access only to error flags possible. */
#endif


/* User constants */

/* Message filterring */
#define SINGLE_32_FILTER           0
#define TWO_16_FILTER              1
#define FOUR_8_FILTER              2
#define FILTER_CLOSED              3

/* Frame formats */
#define STANDARD_FORMAT            0
#define EXTENDED_FORMAT            1

/* Frame types   */
#define DATA_FRAME                 0
#define REMOTE_FRAME               1

byte CAN1_SetAcceptanceMode(byte Mode);
/*
** ===================================================================
**     Method      :  CAN1_SetAcceptanceMode (bean MotorolaCAN)
**
**     Description :
**         Set a content of the acceptance mode register.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Mode            - Acceptance mode.
**                           Supported modes: 
**                           SINGLE_32_FILTER - Single 32-bit
**                           acceptance filter
**                           TWO_16_FILTER - Two 16-bit acceptance
**                           filter
**                           FOUR_8_FILTER - Four 8-bit acceptance
**                           filter
**                           FILTER_CLOSED - Filter closed
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - This bean is disabled by
**                           user
** ===================================================================
*/

byte CAN1_GetStateRX();
/*
** ===================================================================
**     Method      :  CAN1_GetStateRX (bean MotorolaCAN)
**
**     Description :
**         Return a value of the reception complete flag.
**     Parameters  : None
**     Returns     :
**         ---             - Value of the receiver complete flag of
**                           the given buffer. 
**                           Possible values:
**                           FALSE - message buffer is empty
**                           TRUE - message buffer isn't empty
** ===================================================================
*/

byte CAN1_SetAcceptanceCode(dword Mask);
/*
** ===================================================================
**     Method      :  CAN1_SetAcceptanceCode (bean MotorolaCAN)
**
**     Description :
**         Set acceptance code register.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Mask            - Mask could be 11-bit for standard
**                           frame or 29-bit for extended frame
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - This bean is disabled by
**                           user
** ===================================================================
*/

byte CAN1_GetError(CAN1_TError *Err);
/*
** ===================================================================
**     Method      :  CAN1_GetError (bean MotorolaCAN)
**
**     Description :
**         Return a content of the receiver flag register.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Err             - Pointer to returned set of errors
**     Returns     :
**         ---             - Error code (if GetError did not succeed),
**                           possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

void CAN1_SetHigh(void);
/*
** ===================================================================
**     Method      :  CAN1_SetHigh (bean MotorolaCAN)
**
**     Description :
**         This method is internal. It is used by Processor Expert
**         only.
** ===================================================================
*/

byte CAN1_SendFrame(byte BufferNum,dword MessageID,byte FrameType,byte Length,byte *Data);
/*
** ===================================================================
**     Method      :  CAN1_SendFrame (bean MotorolaCAN)
**
**     Description :
**         Send a frame.
**     Parameters  :
**         NAME            - DESCRIPTION
**         BufferNum       - Number of the buffer.
**         MessageID       - Identification of the
**                           message
**         FrameType       - Type of frame
**                           DATA_FRAME - data frame
**                           REMOTE_FRAME - remote frame
**         Length          - Length of the frame in bytes (0..
**                           8)
**       * Data            - Pointer to data
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - This bean is disabled by
**                           user
**                           ERR_VALUE - Some parameter is out of
**                           possible range
** ===================================================================
*/

byte CAN1_ReadFrame(dword *MessageID, byte *FrameType, byte *FrameFormat, byte *Length, byte *Data);
/*
** ===================================================================
**     Method      :  CAN1_ReadFrame (bean MotorolaCAN)
**
**     Description :
**         Read a frame.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * MessageID       - Pointer to the message
**                           indentification
**       * FrameType       - Pointer to a frame type
**                           DATA_FRAME - data frame
**                           REMOTE_FRAME - remote frame
**       * FrameFormat     - Pointer to a frame
**                           format
**                           STANDARD_FORMAT - standard frame 11-bits
**                           EXTENDED_FORMAT - extended frame 29-bits
**       * Length          - Pointer to length of the frame
**       * Data            - The buffer for received data
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - This bean is disabled by
**                           user
**                           ERR_RXEMPTY - The receive buffer is empty
** ===================================================================
*/

void CAN1_Init(void);
/*
** ===================================================================
**     Method      :  CAN1_Init (bean MotorolaCAN)
**
**     Description :
**         This method is internal. It is used by Processor Expert
**         only.
** ===================================================================
*/

#define CAN1_GetStateTX()  (getReg(CANTFLG) & 7)
/*
** ===================================================================
**     Method      :  CAN1_GetStateTX (bean MotorolaCAN)
**
**     Description :
**         Return a value of the transmission complete flags.
**     Parameters  : None
**     Returns     :
**         ---             - Content of the transmitter complete
**                           flag register.
** ===================================================================
*/

byte CAN1_SetAcceptanceMask(dword Mask);
/*
** ===================================================================
**     Method      :  CAN1_SetAcceptanceMask (bean MotorolaCAN)
**
**     Description :
**         Set the acceptance mask registers.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Mask            - Mask could be 11-bit for standard
**                           frame or 29-bit for extended frame
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - This bean is disabled by
**                           user
** ===================================================================
*/



/* END CAN1. */

#endif /* ifndef __CAN1 */
/*
** ###################################################################
**
**     This file was created by UNIS Processor Expert 03.32 for 
**     the Motorola 56800 series of microcontrollers.
**
** ###################################################################
*/
