/** ###################################################################
**     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : PWMC2.H
**     Project   : controller_y
**     Processor : 56F807
**     Beantype  : PWMMC
**     Version   : Bean 01.235, Driver 01.06, CPU db: 2.71.191
**     Compiler  : Metrowerks DSP C Compiler
**     Date/Time : 12/14/2004, 2:50 PM
**     Abstract  :
**         This bean "PWMMC" implements 6-channel center-aligned or 
**         edge-aligned pulse-width modulator for AC motor control, which 
**         is presented on chip. The device is capable of controlling most 
**         motor types: AC induction motors (ACIM), both brushless (BLDC) 
**         and brush DC motors (BDC), switched (SRM) and variable reluctance  
**         motors (VRM),and stepper motors.
**         Another possibility of using this bean is as a pulse-width modulation 
**         generator that generates 6 signals with variable duty and fixed cycle.
**     Settings  :
**         Used output pins            : 
**             ----------------------------------------------------
**                Number (on package)  |    Name
**             ----------------------------------------------------
**                       57            |  PWMB0
**                       58            |  PWMB1
**                       59            |  PWMB2
**                       60            |  PWMB3
**                       61            |  PWMB4
**                       62            |  PWMB5
**             ----------------------------------------------------
**
**         Device                      : PWM_B [15-bit] 
**
**         Counter                     : PWMB_PMCNT [4644]
**         Mode register               : PWMB_PMCFG [61807]
**         Run register                : PWMB_PMCTL [4640]
**         Prescaler                   : PWMB_PMCTL [4640]
**         Modulo register             : PWMB_PWMCM [61797]
**         Compare 0 register          : PWMB_PWMVAL0 [4646]
**         Compare 1 register          : PWMB_PWMVAL1 [4647]
**         Compare 2 register          : PWMB_PWMVAL2 [4648]
**         Compare 3 register          : PWMB_PWMVAL3 [4649]
**         Compare 4 register          : PWMB_PWMVAL4 [4650]
**         Compare 5 register          : PWMB_PWMVAL5 [4651]
**         Fault Control register      : PWMB_PMFCTL [61793]
**         Fault Status register       : PWMB_PMFSA [61794]
**         Fault Acknowledge register  : PWMB_PMFSA [61794]
**         Output Control register     : PWMB_PMOUT [61795]
**         Dead-Time register          : PWMB_PMDEADTM [61804]
**         Disable Mapping register  1 : PWMB_PMDISMAP1 [61805]
**         Disable Mapping register  2 : PWMB_PMDISMAP2 [61806]
**         Channel Control register    : PWMB_PMCCR [61808]
**         Port register               : PWMB_PMPORT [61809]
**
**         User handling procedure     : not specified
**
**
**         Initialization:
** Align                               : edge-aligned mode
** Mode of PWM pair 0                  : complementary
** Mode of PWM pair 1                  : complementary
** Mode of PWM pair 2                  : complementary
** Top-side PWM pair 0 polarity        : positive
** Top-side PWM pair 1 polarity        : positive
** Top-side PWM pair 2 polarity        : positive
** Bottom-side PWM pair 0 polarity     : positive
** Bottom-side PWM pair 1 polarity     : positive
** Bottom-side PWM pair 2 polarity     : positive
** Write protect                       : no
** Output                              : Disabled
** Reload                              : every 1 PWM cycle
** Half cycle reload                   : no
** Hardware acceleration               : disabled
** Dead Time
**  High-speed CPU mode
**    Prescaler                        : divide-by-40
**    Clock                            : 1000000 Hz 
**    Xtal ticks                       : 8  
**    microseconds                     : 1 
**    seconds (real)                   : 0.0000010 
**
** Output control channel 0            : Disabled
** Output control channel 1            : Disabled
** Output control channel 2            : Disabled
** Output control channel 3            : Disabled
** Output control channel 4            : Disabled
** Output control channel 5            : Disabled
**
** Correction
**   Correction method                 : method 1
**   PWM pair 0                        : top
**   PWM pair 1                        : top
**   PWM pair 2                        : top
**
**   Channel masks
**     Mask channel 0                  : no
**     Mask channel 1                  : no
**     Mask channel 2                  : no
**     Mask channel 3                  : no
**     Mask channel 4                  : no
**     Mask channel 5                  : no
**
** Fault device 1
**   clearing mode                     : automatic
**   pin                               : FAULTB0
** Fault device 2
**   clearing mode                     : automatic
**   pin                               : FAULTB1
** Fault device 3
**   clearing mode                     : automatic
**   pin                               : FAULTB2
** Fault device 4
**   clearing mode                     : automatic
**   pin                               : FAULTB3
**
** Mask fault pins
** Channel 0
**   Mask fault 1                      : yes
**   Mask fault 2                      : yes
**   Mask fault 3                      : yes
**   Mask fault 4                      : yes
** Channel 1
**   Mask fault 1                      : yes
**   Mask fault 2                      : yes
**   Mask fault 3                      : yes
**   Mask fault 4                      : yes
** Channel 2
**   Mask fault 1                      : yes
**   Mask fault 2                      : yes
**   Mask fault 3                      : yes
**   Mask fault 4                      : yes
** Channel 3
**   Mask fault 1                      : yes
**   Mask fault 2                      : yes
**   Mask fault 3                      : yes
**   Mask fault 4                      : yes
** Channel 4
**   Mask fault 1                      : yes
**   Mask fault 2                      : yes
**   Mask fault 3                      : yes
**   Mask fault 4                      : yes
** Channel 5
**   Mask fault 1                      : yes
**   Mask fault 2                      : yes
**   Mask fault 3                      : yes
**   Mask fault 4                      : yes
**
**  Device                             : Enabled
**  Event                              : Enabled
**  High-speed CPU mode
**    Prescaler                        : divide-by-1
**    Clock                            : 40000000 Hz
**    Unit                              Xtal ticks
**      Period                         : 267  
**      Channel 0 pulse width          : 133
**      Channel 1 pulse width          : 133
**      Channel 2 pulse width          : 0
**      Channel 3 pulse width          : 266
**      Channel 4 pulse width          : 0
**      Channel 5 pulse width          : 266
**    Unit                              microseconds
**      Period                         : 33 
**      Channel 0 pulse width          : 17
**      Channel 1 pulse width          : 17
**      Channel 2 pulse width          : 0
**      Channel 3 pulse width          : 33
**      Channel 4 pulse width          : 0
**      Channel 5 pulse width          : 33
**    Unit                              seconds (real)
**      Period                         : 0.0000333 
**      Channel 0 pulse width          : 0.0000167
**      Channel 1 pulse width          : 0.0000167
**      Channel 2 pulse width          : 0.0000000
**      Channel 3 pulse width          : 0.0000333
**      Channel 4 pulse width          : 0.0000000
**      Channel 5 pulse width          : 0.0000333
**
**     Contents  :
**         Enable           - byte PWMC2_Enable(void);
**         Disable          - byte PWMC2_Disable(void);
**         SetDuty          - byte PWMC2_SetDuty(byte channel,int duty);
**         SetDutyPercent   - byte PWMC2_SetDutyPercent(byte channel,byte duty);
**         Load             - void PWMC2_Load(void);
**         OutputPadEnable  - void PWMC2_OutputPadEnable(void);
**         OutputPadDisable - void PWMC2_OutputPadDisable(void);
**
**     (c) Copyright UNIS, spol. s r.o. 1997-2002
**     UNIS, spol. s r.o.
**     Jundrovska 33
**     624 00 Brno
**     Czech Republic
**     http      : www.processorexpert.com
**     mail      : info@processorexpert.com
** ###################################################################*/

#ifndef __PWMC2
#define __PWMC2

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */

#include "Cpu.h"

/* MODULE PWMC2. */

#ifndef __BWUserType_TChannels
#define __BWUserType_TChannels
  typedef struct {
    byte channel0  : 1;                                           /* Channel 0 bit */
    byte channel1  : 1;                                           /* Channel 1 bit */
    byte channel2  : 1;                                           /* Channel 2 bit */
    byte channel3  : 1;                                           /* Channel 3 bit */
    byte channel4  : 1;                                           /* channel 4 bit */
    byte channel5  : 1;                                           /* channel 5 bit */
  } TChannels;                         /* Structure contains bit informations for 6 channels, one bit for each channel. */
#endif
#ifndef __BWUserType_TChannelPairs
#define __BWUserType_TChannelPairs
  typedef struct {
    byte pair0 : 1;                                               /* PWM pair 0 */
    byte pair1 : 1;                                               /* PWM pair 1 */
    byte pair2 : 1;                                               /* PWM pair 2 */
  } TChannelPairs;                     /* 3 channel pairs represented by bit in structure. */
#endif


byte PWMC2_Enable(void);
/*
** ===================================================================
**     Method      :  PWMC2_Enable (bean PWMMC)
**
**     Description :
**         Enable the bean - it starts the signal generation. Events
**         can be disabled/enabled by DisableEvent/EnableEvent.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte PWMC2_Disable(void);
/*
** ===================================================================
**     Method      :  PWMC2_Disable (bean PWMMC)
**
**     Description :
**         Disable the bean - it stops signal generation and events
**         calling. When the timer is disabled, it is possible to
**         call method "SetOutput" to control the output value on
**         corresponding pin.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

void PWMC2_SetHigh(void);
/*
** ===================================================================
**     Method      :  PWMC2_SetHigh (bean PWMMC)
**
**     Description :
**         This method is internal. It is used by Processor Expert
**         only.
** ===================================================================
*/

void PWMC2_InterruptOnReload(void);
/*
** ===================================================================
**     Method      :  PWMC2_InterruptOnReload (bean PWMMC)
**
**     Description :
**         This method is internal. It is used by Processor Expert
**         only.
** ===================================================================
*/
void PWMC2_Init(void);
/*
** ===================================================================
**     Method      :  PWMC2_Init (bean PWMMC)
**
**     Description :
**         This method is internal. It is used by Processor Expert
**         only.
** ===================================================================
*/

byte PWMC2_SetDuty(byte channel,int duty);
/*
** ===================================================================
**     Method      :  PWMC2_SetDuty (bean PWMMC)
**
**     Description :
**         Setting duty(value) register of selected channel.  The
**         value is loaded after calling Load() method.
**     Parameters  :
**         NAME            - DESCRIPTION
**         channel         - channel 0-5
**         duty            - Duty value for selected channel.
**                           Writing a number less than or equal to 0
**                           causes the PWM to be off for the entire
**                           PWM period. Writing a number greater
**                           than or equal to the 15 bit (12-bit on
**                           HC08MR32 CPU) modulus causes the PWM to
**                           be on for the entire PWM period.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_NOTAVAIL - Channel is disabled
**                           ERR_RANGE - Parameter channel is out of
**                           range
** ===================================================================
*/

#define PWMC2_Load() setRegBit(PWMB_PMCTL,LDOK)
/*
** ===================================================================
**     Method      :  PWMC2_Load (bean PWMMC)
**
**     Description :
**         Apply last seting of the methods SetDuty, SetDutyPercent,
**         SetPeriod and SetPrescaler.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

byte PWMC2_SetDutyPercent(byte channel,byte duty);
/*
** ===================================================================
**     Method      :  PWMC2_SetDutyPercent (bean PWMMC)
**
**     Description :
**         Setting duty(value) in percent of selected channel.  The
**         value is loaded after calling Load() method.
**     Parameters  :
**         NAME            - DESCRIPTION
**         channel         - channel 0-5
**         duty            - Duty value in pecents for selected
**                           channel.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_NOTAVAIL - Channel is disabled
**                           ERR_RANGE - Parameter channel is out of
**                           range
** ===================================================================
*/

#define PWMC2_OutputPadEnable() setRegBit(PWMB_PMOUT,PAD_EN)
/*
** ===================================================================
**     Method      :  PWMC2_OutputPadEnable (bean PWMMC)
**
**     Description :
**         Method enables output pads.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#define PWMC2_OutputPadDisable() clrRegBit(PWMB_PMOUT,PAD_EN)
/*
** ===================================================================
**     Method      :  PWMC2_OutputPadDisable (bean PWMMC)
**
**     Description :
**         Method disables output pads.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

/* END PWMC2. */

#endif /* ifndef __PWMC2 */
/*
** ###################################################################
**
**     This file was created by UNIS Processor Expert 03.32 for 
**     the Motorola 56800 series of microcontrollers.
**
** ###################################################################
*/
