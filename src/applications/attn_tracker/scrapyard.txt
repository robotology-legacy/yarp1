
  double best_dist = 0;
  double worst_dist = 1e10;
  double mu_dx = 0;
  double mu_dy = 0;
  double mu_vx = 0;
  double mu_vy = 0;
  double mu_total = 0;
  //double dists[3][3];
  double rec_dx[100], rec_dy[100], rec_vx[100], rec_vy[100], rec_val[100];
  int rec_top = 0;
  double noisy = 0;
  int trust_ct = 0;
  for (int DX=-DISP; DX<=DISP; DX+=DISP)
    {
      for (int DY=-DISP; DY<=DISP; DY+=DISP)
	{
	  int sx0 = otx+DX;
	  int sy0 = oty+DY;
	  sub_tracker.Apply(prev,mono,sx0,sy0);
	  int sx1 = sub_tracker.GetX();
	  int sy1 = sub_tracker.GetY();
	  double quality = sub_tracker.GetQuality();
	  trust_ct++;
	  double vx = sx1-sx0;
	  double vy = sy1-sy0;
	  vx -= dgx;
	  vy -= dgy;
	  if (quality<3)
	    {
	      vx = 0;
	      vy = 0;
	      noisy+=1;
	    }
	  //double dist = sqrt((sx1-sx0)*(sx1-sx0)+(sy1-sy0)*(sy1-sy0));
	  double dist = sqrt(vx*vx+vy*vy);
	  //dists[DX+1][DY+1] = dist;
	  if (dist<3) dist = 0;
	  mu_dx += DX * dist;
	  mu_dy += DY * dist;
	  mu_total += dist;
	  if (dist>best_dist)
	    {
	      best_dist = dist;
	    }
	  if (dist<worst_dist)
	    {
	      worst_dist = dist;
	      mu_vx = sx1-sx0;
	      mu_vy = sy1-sy0;
	    }
	  rec_dx[rec_top] = DX;
	  rec_dy[rec_top] = DY;
	  rec_vx[rec_top] = sx1-sx0;
	  rec_vy[rec_top] = sy1-sy0;
	  rec_val[rec_top] = dist;
	  rec_top++;
	}
    }
  noisy /= trust_ct;
  if (mu_total<0.1) 
    {
      mu_total = 0.1;
      best_dist = 0;
    }
  mu_dx /= mu_total;
  mu_dy /= mu_total;

  /*
  mu_total = mu_dx = mu_dy = 0;
  for (int i=0; i<rec_top; i++)
    {
      double dx = rec_dx[i];
      double dy = rec_dy[i];
      double vx = rec_vx[i];
      double vy = rec_vy[i];
      vx -= mu_vx;
      vy -= mu_vy;
      double dist = sqrt(vx*vx+vy*vy);
      if (dist>2)
	{
	  mu_total += dist;
	  mu_dx += dx*dist;
	  mu_dy += dy*dist;
	}
    }
  if (mu_total<0.1) mu_total = 0.1;
  mu_dx /= mu_total;
  mu_dy /= mu_total;
   */


  if (!low_quality && (noisy<0.2))
    {
      if (best_dist>=0.9)
	//  if (best_dist>=0.9 && worst_dist<0.9)
	//  if (mu_total>3)
	{
	  if (fabs(mu_dx)+fabs(mu_dy)>0.001)
	    {
	      printf("DISPLACE by %g %g\n", mu_dx, mu_dy);
	      x = px = tx = (int)(otx+mu_dx+0.5);
	      y = py = ty = (int)(oty+mu_dy+0.5);
	    }
	}
    }
  else
    {
//      printf("DISPLACEMENT is too noisy to trust\n");
    }
