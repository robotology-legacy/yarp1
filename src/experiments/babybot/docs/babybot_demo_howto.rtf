{\rtf1\ansi\ansicpg1252\deff0\deflang1033\deflangfe1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial;}{\f1\froman\fprq2\fcharset0 Times New Roman;}{\f2\froman\fprq2\fcharset2 Symbol;}{\f3\fmodern\fprq1\fcharset0 Courier New;}}
{\colortbl ;\red0\green0\blue0;}
{\stylesheet{ Normal;}{\s1 heading 1;}{\s2 heading 2;}{\s3 heading 3;}}
\viewkind4\uc1\pard\keepn\nowidctlpar\s1\sb240\sa60\kerning32\b\f0\fs32 Running the Babybot demo\par
\pard\nowidctlpar\lang2057\kerning0\b0\f1\fs24 Claudio Castellini, March/June 2006\par
\pard\keepn\nowidctlpar\s2\lang1033\b\f0\fs28 1. Introduction\par
\pard\nowidctlpar\b0\f1\fs24 This manual will enable you to run Babybot\rquote s demos, from the simplest to the most complex one. This manual is a follow-up to the \i Babybot HOWTO\i0 , which I will assume you have read and understood. In particular, I will assume \i you are at the final stage of the Babybot HOWTO\i0 , end of Section 2, with the following pieces enabled and correctly running:\par
- the eyes,\par
- the arm,\par
- the head,\par
- the hand,\par
- the wrist force sensor, and\par
- the tactile sensors.\par
We start from a point in which the robot is ready to accept your commands via \i sendCmd\i0 . All preliminaries and notes to the previous manual apply.\par
\b Warning: \b0 this is correct as of the above indicated date, and there is \i no guarantee\i0  it will still work fine when you read this. You should check everything is fine, and this Manual is up to date, with the people working on Babybot and with Matteo, our sysadm, \i before\i0  attempting to do anything whatsoever.\par
\pard\keepn\nowidctlpar\s2\b\f0\fs28 2. Vision\par
\pard\nowidctlpar\fi-360\li720\tx720\b0\f2\fs24\'b7\tab\f1 Launch \i vision/trackerRun.js\i0  and \i vision/trackerConnect.js\i0 . A camview will appear on \f3 cariddi\f1 , showing the tracking point of the robot.\par
\pard\nowidctlpar\b\i Demo: \i0 show that whatever you move in the robot view field, the tracking point will follow.\par
\b0 Here no head movement will be performed; the tracing point will obviously stop following the moving object when it gets out of the view field.\b\par
\b0 We then move on to having the robot head follow any moving object.\par
\pard\nowidctlpar\fi-360\li720\tx720\f2\'b7\tab\f1 Launch \i vision/vergenceRun.js\i0  and \i vision/vergenceConnect.js.\i0  A camview will appear on \f3 circe\f1 , showing the animated graph of vergence.\par
\pard\nowidctlpar\fi-360\li720\f2\'b7\tab\f1 Launch \i behaviors/hControlRun.js\i0 ,\i  behaviors/hControlConnect.js\i0 ,\i  behaviors/hSaccadesRun.js\i0 ,\i  \i0 and \i behaviors/hSaccadesConnect.js\i0 . As a result of this, eight programs will be started on \f3 thaumas\f1 , and a further camview will appear on \f3 circe\f1 , showing the robot\rquote s view field.\par
\f2\'b7\tab\f1 Issue \i SinkRelease \i0 in \i sendCmd\i0 . You should see the right eye "verge", and then the two foveas showing some very similar images. \i If this does not happen, something is wrong with vergence, and nothing else will work. \i0 Repeat the steps so far.\par
\f2\'b7\tab\f1 Issue \i SinkSaccadeMode \i0 in \i sendCmd\i0 .\par
\pard\nowidctlpar In the \i Saccade \i0 mode, activated by the \i SinkSaccadeMode\i0  command, the robot saccades to anything you point to in the visual field.\par
\b\i Demo 2: \i0 show that the robot saccades to an object you click upon with the mouse in the view field, shown in the camview on \f3 circe\f1 .\par
\b0 Now we switch to the \i Tracking \i0 mode and try and track a user\rquote s finger.\par
\pard\nowidctlpar\fi-360\li720\tx720\f2\'b7\tab\f1 Issue \i SinkTrackingMode\i0  in \i sendCmd\i0 .\par
\pard\nowidctlpar The robot will start tracking the moving point in the camview on \f3 cariddi\f1 .\par
\b\i Demo 3: \i0 show that the robot tracks a moving object in front of its eyes.\par
\b0 In particular, if Demo 2 was not set up correctly, this demo won\rquote t work - the robot head will wander around with no target. This demo is rather impressive, the head and eyes can track, e.g., your finger even if you move it quite fast.\par
While we are in the \i Tracking \i0 mode, another interesting thing can be done:\par
\pard\nowidctlpar\fi-360\li720\tx720\cf1\f2\'b7\tab\f1 Launch \i vision/handTrackerRun.js \i0 and \i vision/handTrackerConnect.js\i0 . A camview will appear on \f3 hades\f1 , showing a circle where the hand is. At this point, check carefully that \i the circle indicates exactly the palm of the hand\i0 .\par
\cf0\f2\'b7\tab\f1 Issue \i AttentionLookHand\i0  in \i sendCmd\i0 .\par
\pard\nowidctlpar As a result, the robot will foveate on its own hand.\par
\b\i Demo 4: \i0 show that the robot looks at its own hand.\par
\b0 You can now manually move the robot arm and hand (carefully...) and the head will automatically follow the hand during the motion. You can keep an eye on the hand tracking by looking at the \i camview \i0 on \f3 hades\f1 .\par
You can also switch back to tracking a moving object issuing \i AttentionLookTarget\i0  in \i sendCmd\i0 . If you then issue \i SinkSaccadeMode\i0  again, you will be back to the \i Saccade \i0 mode.\par
You can repeatedly switch back and forth between demos 2, 3 and 4 by following the sequence of commands above.\par
\pard\keepn\nowidctlpar\s2\b\f0\fs28 3. Grasping\par
\pard\nowidctlpar\b0\f1\fs24 Now issue \i AttentionLookTarget\i0  and \i SinkSaccadeMode \i0 in \i sendCmd\i0 . Then,\par
\pard\nowidctlpar\fi-360\li720\f2\'b7\tab\cf1\f1 Launch \i behaviors/reachingRun.js \i0 and \i behaviors/reachingConnect.js\i0 . \cf0 As a result, an instance of \i Matlab 7.1\i0 , showing a window with a schema of the robot hand, will open up on \f3 rhea\f1 .\par
\pard\nowidctlpar Now the robot will be able to saccade to \i and grasp \i0 an object clicked upon in the camview on \f3 circe\f1 .\par
\b\i Demo 5: \i0 show that the robot grasps an object you click upon in the camview.\par
\cf1\b0 Lastly, we go for the most scenic demo.\par
\pard\nowidctlpar\fi-360\li720\f2\'b7\tab\f1 Launch \i vision/visualAttentionRun.js, vision/visualAttentionConnect.js \i0 and \i vision/visualAttentionToSaccades.js\i0 . As a result, an application will start up on \f3 scilla\f1 , and three camview will open up on \f3 hades\f1 , showing animated white and gray blobs.\par
\pard\nowidctlpar\fi-360\li720\tx720\f2\'b7\tab\f1 Launch \i experiments/explGraspRflxRun.js \i0 and \i experiments/explGraspRflxConnect.js. \i0 A program will start on \f3 rhea\f1 .\par
\pard\nowidctlpar\fi-360\li720\f2\'b7\tab\f1 Launch \i experiments/explorationRun.js, experiments/explorationConnect.js,\i0  and \i experiments/explorationToVisualAttention.js\i0 . Another program will start on \f3 rhea\f1 .\par
\f2\'b7\tab\f1 Lastly, launch \i behaviors/reachingToVisualAttention.js. \i0 A window will briefly open and close on \f3 eolo\f1 .\par
\pard\nowidctlpar Now if you place an object on the robot\rquote s hand, a sequence of events will happen.\par
\b\i Demo 6: \i0 the full monty. Place an object on the robot\rquote s hand; the robot will grasp the object and move it under its own gaze, as if looking carefully at its shape. Then it will drop the object. Place then the object in the robot\rquote s visual field: the robot will grasp it and the drop it.\par
\b0 Your audience will now either clap their hands or stare in bewilderment\'85\par
\pard\keepn\nowidctlpar\s2\b\f0\fs28 4. Shutting Babybot\rquote s demos down\par
\pard\nowidctlpar\tx567\b0\f1\fs24 As in the \i Babybot HOWTO\i0 , again we slay everything the other way round. So:\par
\pard\nowidctlpar\s3\f0 Grasping\par
\pard\nowidctlpar\fi-377\li737\tx737\f1 (1)\tab Launch \i experiments\\explorationSlay.js \i0 and \i experiments\\explGraspRflxSlay.js\i0 . Then launch \i vision/visualAttentionSlay.js\i0 . Among the rest three camviews on \f3 hades\f1  should die.\par
\pard\nowidctlpar\fi-377\li737\cf0 (2)\tab Launch \i behaviors/reachingSlay.js\i0 , then issue \i HandKinQuit \i0 in \i sendCmd\i0 . \i Matlab \i0 on \f3 rhea\f1  should die.\par
\pard\nowidctlpar\s3\f0 Vision\par
\pard\nowidctlpar\fi-377\li737\tx737\f1 (1)\tab Launch \i behaviors/hSaccadesSlay.js \i0 and \i behaviors/hControlSlay.js\i0 . As a result, all applications on \f3 thaumas\f1  should die, except \i headcontrol.exe.\i0\par
\pard\nowidctlpar\fi-377\li737 (2)\tab Launch \i vision/handTrackerSlay.js, vision/trackerSlay.js \i0 and\i  vision/vergenceSlay.js.\i0  As a result, all applications on \f3 hades\f1  and \f3 circe\f1  should die.\par
\pard\nowidctlpar At this point, you should be exactly at the point you started from: Babybot ready to accept commands via \i sendCmd\i0 . If you need to shut everything down, please follow the shutdown instructions in the \i Babybot HOWTO\i0 .\par
\par
}
 