//
// tracker - block matching
//	- Jan 2002.
//
#include <sys/kernel.h>
#include <iostream.h>
#include <time.h>

#include "YARPImage.h"
#include "YARPFilters.h"
#include "YARPColorConverter.h"
#include "YARPOpticFlowBM.h"
#include "YARPTemporalSmooth.h"
#include "YARPImageDraw.h"
#include "YARPTracker.h"

#include "YARPPort.h"
#include "YARPImagePort.h"

#include <VisMatrix.h>
#include <Models.h>

#include <conf/lp_layout.h>
#include <conf/tx_data.h>

// INPUT PORTS.
YARPInputPortOf<YARPGenericImage> in;
YARPInputPortOf<TrackerMsg> in_pos;

// OUTPUT PORTS.
YARPOutputPortOf<YARPGenericImage> outt;
YARPOutputPortOf<FiveBoxesInARow> out_tracker;

char *my_name = "/yarp/arm_tracker";

char in_name[256];
char in_pos_name[256];

char outt_name[256];
char tracker_name[256];


// parses command line.
void ParseCommandLine(int argc, char *argv[])
{
	int i;

	for(i=1;i<argc;i++)
	{
		switch(argv[i][0])
		{
			case '-':
				switch(argv[i][1])
				{
					case 'h':
					case '-':
						cout << endl;
						cout << my_name << " argument:" << endl;
						cout << endl;
						exit(0);
						break;

					default:
						break;
				}
				break;
			case '+':
				my_name = &argv[i][1];
				break;
			default:
				break;
		}
	}

	sprintf (in_name, "%s/in", my_name); 
	sprintf (in_pos_name, "%s/inp", my_name); 

	sprintf (outt_name, "%s/outt", my_name); 
	sprintf (tracker_name, "%s/track", my_name); 
}


#include <YARPSafeNew.h>
#include <vector.h>				// stl list

const double PRECISION = 60*60;			// quare error of the map in.
const double THRESHOLD_INPUT = 2000*2000;
const double THRESHOLDMAP_X = 60*60;
const double THRESHOLDMAP_Y = 10*10;

//#define _DEBUGX 1

// unit of the head kinematics reduction.
class KinUnit : public vector<CVisDVector>
{
protected:
	CVisDVector m_tmp, m_tmp2;
	typedef vector<CVisDVector>::iterator POSITION;
	POSITION m_lastbest;

	void Reduce (const CVisDVector& v) 
	{
		assert (v.Length() == 7);
		m_tmp (1) = v(1);
		m_tmp (2) = v(3);
		m_tmp (3) = v(4);
		m_tmp (4) = v(5);
		m_tmp (5) = v(6);
		m_tmp (6) = v(7);
	}

public:
	KinUnit() { m_tmp.Resize(6); m_tmp2.Resize(6); m_lastbest = 0; }
	~KinUnit() {}

	void Add (const CVisDVector& v)
	{
		Reduce (v);

		// add anyway. no check.
		push_back (m_tmp);
	}

	void Cleanup (void)
	{
		erase(begin(), end());
	}

	bool Empty(void) { return empty(); }

	double Score (const CVisDVector& v)
	{
		Reduce (v);

		if (empty())
			return -1;

		// get the min dist with all vectors in the list.
		POSITION index = begin();

		m_tmp2 = m_tmp - *index;
		double min = m_tmp2.norm2square();
		m_lastbest = index;
		index++;

		while (index != end())
		{
			m_tmp2 = m_tmp - *index;
			double s = m_tmp2.norm2square();
			if (s < min)
			{
				min = s;
				m_lastbest = index;
			}
			index++;
		}

		return min;
	}

	// can be modified.
	CVisDVector& GetLastBest(void) { return *m_lastbest; }

	void Serialize (FILE *fp)
	{
		//
		// save size.
		POSITION index = begin();

		fprintf (fp, "%d %d\n", size(), index->Length());
		if (size() == 0)
			return;

		while (index != end())
		{
			for (int i = 1; i <= index->Length(); i++)
				fprintf (fp, "%lf ", (*index)(i));
			fprintf (fp, "\n");
			index++;
		}
	}

	void Unserialize (FILE *fp)
	{
		erase (begin(), end());
		int sz, lg;
		fscanf (fp, "%d %d\n", &sz, &lg);

		if (sz == 0)
			return;

		double tmp;
		CVisDVector x(lg);

		for (int i = 0; i < sz; i++)
		{
			for (int j = 1; j <= lg; j++)
			{
				fscanf (fp, "%lf ", &tmp);
				x(j) = tmp;
			}
			fscanf (fp, "\n");

			push_back(x);
		}
	}
};

class MapUnit 
{
public:
	CVisDVector x;
	CVisDVector y;
	int n;

	MapUnit ()
	{
		x.Resize(4);
		y.Resize(2);
		n = 0;
	}

	~MapUnit () {}

	inline void Add2Unit (const CVisDVector& xx, const CVisDVector& yy)
	{
		x *= n;
		y *= n;
		x += xx;
		y += yy;
		n++;
		x /= n;
		y /= n;
	}

	void Serialize (FILE *fp)
	{
		// n first.
		fprintf (fp, "%d\n", n);
		for (int i = 1; i <= 4; i++)
			fprintf (fp, "%lf ", x(i));
		fprintf (fp, "\n");

		for (i = 1; i <= 2; i++)
			fprintf (fp, "%lf ", y(i));
		fprintf (fp, "\n");
	}

	void Unserialize (FILE *fp)
	{
		fscanf (fp, "%d\n", &n);
		double tmp;
		for (int i = 1; i <= 4; i++)
		{
			fscanf (fp, "%lf ", &tmp);
			x(i) = tmp;
		}
		fscanf (fp, "\n");
		for (i = 1; i <= 2; i++)
		{
			fscanf (fp, "%lf ", &tmp);
			y(i) = tmp;
		}
		fscanf (fp, "\n");
	}
};

class HeadArmMap : public vector<MapUnit>
{
protected:
	double m_precision;
	typedef vector<MapUnit>::iterator POSITION;

	CVisDVector m_zero;
	CVisDVector m_zerox;

	POSITION m_min_index;
	double m_lasterror;

public:
	HeadArmMap () 
	{ 
		m_lasterror = PRECISION+1;
		m_precision = PRECISION;
		m_min_index = 0;

		m_zero.Resize(2);
		m_zero = 0;
		m_zerox.Resize(4);
		m_zerox = 0;
	}

	~HeadArmMap () {}

	void Cleanup ()
	{
		erase(begin(), end());
	}

	bool Empty(void) { return empty(); }

	// check and add unit (remember to call Nearest first).
	// x must be the same as in the call to Nearest.
	void Add (const CVisDVector& x, const CVisDVector& y)
	{
		if (m_lasterror > m_precision)
		{
			// add a complete new unit.
			MapUnit nu;
			nu.x = x;
			nu.y = y;
			nu.n = 1;
			push_back (nu);
		}
		else
		{
			// add to the existing minimum (e.g. existing unit).
			// average.
			(*m_min_index).Add2Unit (x, y);
		}
	}

	// call Nearest first.
	CVisDVector NearestIn (const CVisDVector& x)
	{
		if (m_min_index != 0)
		{
			return (*m_min_index).x;
		}

		return m_zerox;
	}

	double GetError (void) const { return m_lasterror; }

	CVisDVector Nearest (const CVisDVector& x)
	{
		assert (x.Length() == 4);

		if (empty())
		{
			m_lasterror = m_precision + 1;
			m_min_index = 0;
#ifdef _DEBUGX
			printf ("Nearest returns because list is empty\n");
#endif
			return m_zero;
		}
		
		POSITION index = begin();
		CVisDVector tmp(4);

		tmp = (*index).x - x;
		m_lasterror = tmp.norm2square();
		m_min_index = index;
		index++;

		while (index != end())
		{
			tmp = (*index).x - x;
			double s = tmp.norm2square();
			if (s < m_lasterror)
			{
				m_lasterror = s;
				m_min_index = index;
			}
			//
			index++;
		}

#ifdef _DEBUGX
		printf ("last error : %lf\n", m_lasterror);
#endif

		return (*m_min_index).y;
	}

	void Serialize (FILE *fp)
	{
		fprintf (fp, "%d\n", size());
		if (size() == 0)
			return;

		POSITION index = begin();

		while (index != end())
		{
			index->Serialize(fp);
			index ++;
		}

		fprintf (fp, "\n");
	}

	void Unserialize (FILE *fp)
	{
		Cleanup ();
		int sz;
		fscanf (fp, "%d\n", &sz);
		if (sz == 0)
			return;

		MapUnit x;
		for (int i = 0; i < sz; i++)
		{
			x.Unserialize (fp);
			push_back (x);
		}

		fscanf (fp, "\n");
	}
};

class BigUnit
{
public:
	KinUnit a;
	HeadArmMap b;
};

class WTAKin : public vector<BigUnit>
{
protected:
	typedef vector<BigUnit>::iterator POSITION;
	POSITION m_lastbest;

	int Winner (const CVisDVector& v)
	{
		if (empty())
			return -1;

		//
		POSITION index = begin();
		int ii = 0;
		
		int bestindex = 0;
		double best = (*index).a.Score(v);
		m_lastbest = index;

		index ++;
		ii++;

		while (index != end())
		{
			double s = (*index).a.Score(v);
			if (s < best)
			{
				best = s;
				bestindex = ii;
				m_lastbest = index;
			}
			ii++;
			index++;
		}

		return bestindex;
	}

	// LATER: must return whether it found a match.
	void SearchAmongMaps (const CVisDVector& v, const CVisDVector& arm, const CVisDVector& img)
	{
#ifdef _DEBUGX
			printf ("inside SearchAmongMaps\n");
#endif
			// search among the 4->2 maps whether there's one close 
			// in 5D (arm space) to an existing one. join the vector v
			// of head position to that unit.
			// no need in this case to create a new unit.
			POSITION index = begin();
			POSITION bestlocalindex = index;
			double xyerr = 1e20;

			while (index != end())
			{
				// check first the in vector.
				// run through the map.
				HeadArmMap& map = (*index).b;
				CVisDVector nearest = map.Nearest (arm);
				CVisDVector nearestx = map.NearestIn (arm);
				nearestx -= arm;
				nearest -= img;

				// if close enough. 
				double xerr = nearestx.norm2square();
				double yerr = nearest.norm2square();
#ifdef _DEBUGX
				printf ("test for existing configuration (arm/img)\n");
				printf ("xerr %lf yerr %lf\n", xerr, yerr);
				printf ("thrx %lf thry %lf\n", THRESHOLDMAP_X, THRESHOLDMAP_Y);
#endif
				if (xerr < THRESHOLDMAP_X &&
					yerr < THRESHOLDMAP_Y)
				{
					// LATER: change this stupid double test!
					// the vector can be added to this unit.
					if (xerr + yerr < xyerr)
					{
						xyerr = xerr + yerr;
						bestlocalindex = index;
					}
				}

				index++;
			}

#ifdef _DEBUGX
			printf ("best search resuld over 6D maps\n");
			printf ("xyerr %lf, thr %lf\n", xyerr, THRESHOLDMAP_X+THRESHOLDMAP_Y);
#endif
			if (xyerr < THRESHOLDMAP_X + THRESHOLDMAP_Y)
			{
				// something has been found.
				// add v to the unit with bestlocalindex.
				// unless there's already one too close.
				double score = (*bestlocalindex).a.Score(v);
				if (score >= THRESHOLD_INPUT)
					(*bestlocalindex).a.Add(v);

				// what about arm and img. add them to the map of bestlocalindex.
				(*bestlocalindex).b.Nearest(arm);
				(*bestlocalindex).b.Add (arm, img);
				// Add works on its own threshold for adding a new unit
				// to its map.

#ifdef _DEBUGX
				printf ("we've got a possible unit\n");
				printf ("added new data to the map, and head position to list\n");
				printf ("units : %d\n", size());
#endif
			}
#ifdef _DEBUGX
			printf ("returning from SearchAmongMaps\n");
#endif
	}

public:
	WTAKin () {}
	~WTAKin () {}

	void Cleanup (void)
	{
		erase(begin(), end());
	}

	// v is the head pos vector (7).
	// arm is the arm vector (4).
	// and img is the img position vector (2).
	void Process (const CVisDVector& v, const CVisDVector& arm, const CVisDVector& img, CVisDVector& predicted)
	{
#ifdef _DEBUGX
			PrintV ("head pos", v);
			PrintV ("arm pos", arm);
			PrintV ("img pos", img);
#endif

		// test whether there's a possible winner (non empty list).
		if (Winner (v) >= 0)
		{
#ifdef _DEBUGX
			printf ("there's a winner... \n");
#endif
			double score = (*m_lastbest).a.Score(v);

#ifdef _DEBUGX
			printf ("test for existing unit\n");
			printf ("score %lf threshold %lf\n", score, THRESHOLD_INPUT);
#endif
			if (score < THRESHOLD_INPUT)
			{
				// there's already a vector for that particular head position.
				// we have a winner.
				// we can address the map relative to this winner.

				// keep this for after the search.
				//predicted = (*m_lastbest).b.Nearest (arm);
				//(*m_lastbest).b.Add (arm, img);

				// IMPORTANT:
				// I need to run here also a search for a possible map
				// match (arm,img). In that case I should add also the
				// vector v to that unit anyway. But also I might merge the
				// two unit because clearly they're coding the same
				// head direction...

				// this should be probably moved off-line.
				// too slow here.
				SearchAmongMaps (v, arm, img);
				predicted = (*m_lastbest).b.Nearest (arm);
				(*m_lastbest).b.Add (arm, img);

				// LESS IMPORTANT:
				// In the long run I might need a merge procedure to
				// fuse redundant units (those with substantial overlap).
				// Otherwise the query procedure can be done to allow
				// for checking not only the first best input match but 
				// also a possible second match within a certain range.
				// It might happen that input matches would not 
				// correspond to a map match (output).
				// Score the query on a weighed sum of input head and
				// input arm position.

#ifdef _DEBUGX
				printf ("we've got a winner unit\n");
				printf ("just added new data to the map\n");
				printf ("units : %d\n", size());
#endif
				// done.
				return;
			}

			// no suitable winner, we need to check whether the vector can be added
			// to an existing unit. (redundancy check).
			//

			// search among the 4->2 maps whether there's one close 
			// in 5D (arm space) to an existing one. join the vector v
			// of head position to that unit.
			// no need in this case to create a new unit.
			POSITION index = begin();
			POSITION bestlocalindex = index;
			double xyerr = 1e20;

			while (index != end())
			{
				// check first the in vector.
				// run through the map.
				HeadArmMap& map = (*index).b;
				CVisDVector nearest = map.Nearest (arm);
				CVisDVector nearestx = map.NearestIn (arm);
				nearestx -= arm;
				nearest -= img;

				// if close enough. 
				double xerr = nearestx.norm2square();
				double yerr = nearest.norm2square();
#ifdef _DEBUGX
				printf ("test for existing configuration (arm/img)\n");
				printf ("xerr %lf yerr %lf\n", xerr, yerr);
				printf ("thrx %lf thry %lf\n", THRESHOLDMAP_X, THRESHOLDMAP_Y);
#endif
				if (xerr < THRESHOLDMAP_X &&
					yerr < THRESHOLDMAP_Y)
				{
					// the vector can be added to this unit.
					if (xerr + yerr < xyerr)
					{
						xyerr = xerr + yerr;
						bestlocalindex = index;
					}
				}

				index++;
			}

#ifdef _DEBUGX
			printf ("best search resuld over 6D maps\n");
			printf ("xyerr %lf, thr %lf\n", xyerr, THRESHOLDMAP_X+THRESHOLDMAP_Y);
#endif
			if (xyerr < THRESHOLDMAP_X + THRESHOLDMAP_Y)
			{
				// something has been found.
				// add v to the unit with bestlocalindex.
				double score = (*bestlocalindex).a.Score(v);
				if (score >= THRESHOLD_INPUT)
					(*bestlocalindex).a.Add(v);

				// what about arm and img. add them to the map of bestlocalindex.
				(*bestlocalindex).b.Nearest(arm);
				(*bestlocalindex).b.Add (arm, img);
				// Add works on its own threshold for adding a new unit
				// to its map.

#ifdef _DEBUGX
				printf ("we've got a possible unit\n");
				printf ("added new data to the map, and head position to list\n");
				printf ("units : %d\n", size());
#endif

				predicted = -1;
				return;
				// done.
			}

			// none of them, we need to add a new unit (we are in a
			// completely new position).			
			BigUnit xx;
			xx.a.Add (v);
			xx.b.Nearest (arm);
			xx.b.Add (arm, img);
			predicted = -1;
			push_back (xx);

#ifdef _DEBUGX
			printf ("new unit added BECAUSE of new position\n");
			printf ("units : %d\n", size());
#endif
		}
		else
		{
			// add unit anyway. list empty.
			BigUnit xx;
			xx.a.Add (v);
			xx.b.Nearest (arm);
			xx.b.Add (arm, img);
			predicted = -1;
			push_back (xx);

#ifdef _DEBUGX
			printf("map was empty, adding new unit\n");
			printf ("units : %d\n", size());
#endif
		}
	}


	void Predict (const CVisDVector& v, const CVisDVector& arm, CVisDVector& predicted)
	{
#ifdef _DEBUGX
		printf ("Pure prediction mode\n");
		PrintV ("head pos", v);
		PrintV ("arm pos", arm);
#endif

		// test whether there's a possible winner (non empty list).
		if (Winner (v) >= 0)
		{
#ifdef _DEBUGX
			printf ("there's a winner... \n");
#endif
			double score = (*m_lastbest).a.Score(v);

#ifdef _DEBUGX
			printf ("test for existing unit\n");
			printf ("score %lf threshold %lf\n", score, THRESHOLD_INPUT);
#endif
			if (score < THRESHOLD_INPUT)
			{
				// there's already a vector for that particular head position.
				// we have a winner.
				// we can address the map relative to this winner.

				predicted = (*m_lastbest).b.Nearest (arm);
				if ((*m_lastbest).b.GetError() >= THRESHOLDMAP_X)
				{
					// current point would be too far for good prediction.
					predicted = -1;
				}

				// LESS IMPORTANT:
				// In the long run I might need a merge procedure to
				// fuse redundant units (those with substantial overlap).

				// Otherwise the query procedure can be done to allow
				// for checking not only the first best input match but 
				// also a possible second match within a certain range.
				// It might happen that input matches would not 
				// correspond to a map match (output).

				// Score the query on a weighed sum of input head and
				// input arm position.
	
#ifdef _DEBUGX
				printf ("we've got a winner unit\n");
				printf ("just added new data to the map\n");
				printf ("units : %d\n", size());
#endif
				// done.
				return;
			}
			else
			{
				predicted = -1;
#ifdef _DEBUGX
				printf("no close enough position - no prediction\n");
#endif
				return;
			}
		}
		else
		{
			predicted = -1;
#ifdef _DEBUGX
			printf("map was empty - no prediction\n");
#endif
		}
	}

	void PrintV (const char *name, const CVisDVector& v)
	{
		printf ("%s : ", name);
		for (int i = 1; i <= v.Length(); i++)
			printf ("%f ", v(i));
		printf ("\n");
	}

	//
	int Serialize (const char *filename)
	{
		FILE *fp = fopen (filename, "w");
		if (fp == NULL)
		{
			printf ("can't serialize\n");
			return -1;
		}

		fprintf (fp, "size: %d\n\n", size());
		if (size() == 0)
		{
			fclose (fp);
			printf ("the main list is empty\n");
			return -1;
		}

		POSITION index = begin();
		int i = 0;

		while (index != end())
		{
			fprintf (fp, "unit: %d\n", i);
			fprintf (fp, "vectors\n");
			index->a.Serialize(fp);
			fprintf (fp, "map\n");
			index->b.Serialize(fp);
			index++;
			i++;
		}

		fclose (fp);
		return 0;
	}

	int Unserialize (const char *filename)
	{
		FILE *fp = fopen (filename, "r");
		if (fp == NULL)
		{
			printf ("can't unserialize\n");
			return -1;
		}

		Cleanup ();
		int sz;
		fscanf (fp, "size: %d\n\n", &sz);

		if (sz == 0)
		{
			fclose (fp);
			printf ("the main list is empty\n");
			return -1;
		}

		BigUnit x;

		for (int i = 0; i < sz; i++)
		{
			int tmp;
			fscanf (fp, "unit: %d\n", &tmp);
			fscanf (fp, "vectors\n");
			x.a.Unserialize (fp);
			fscanf (fp, "map\n");
			x.b.Unserialize (fp);
			push_back (x);
		}

		fclose(fp);
		return 0;
	}
};


void main(int argc, char *argv[])
{
	ParseCommandLine (argc, argv);

	in.Register (in_name);
	in_pos.Register (in_pos_name);

	outt.Register (outt_name);
	out_tracker.Register (tracker_name);

	YARPImageOf<YarpPixelBGR> in_image;
	YARPImageOf<YarpPixelMono> mono;

	in_image.Resize (Size, Size);
	mono.Resize (Size, Size);

	TrackerMsg tracker_position;
	CVisDVector arm(4);
	CVisDVector head(7);
	CVisDVector img(2);
	CVisDVector predicted(2);

	// load/save, load always from this file and safe into .new.txt
	WTAKin map;
	map.Unserialize ("kinesthesia.txt");

	YarpPixelBGR red;
	red.b = red.g = 0;
	red.r = 255;

	YarpPixelBGR green;
	green.b = green.r = 0;
	green.g = 255;

	int count = 0;
	FiveBoxesInARow target_boxes;	// boxes.

	while (1)
	{
		// READ IMG.
		in.Read();
		in_image.Refer (in.Content());

		// READ FROM OPTIC FLOW POSITION DATA.
		in_pos.Read();
		tracker_position = in_pos.Content();
		
		arm(1) = tracker_position.aj[3];
		arm(2) = tracker_position.aj[4];
		arm(3) = tracker_position.aj[5];
		arm(4) = tracker_position.aj[6];

		for (int i = 1; i <= 7; i++)
			head(i) = tracker_position.hj[i-1];

		img(1) = tracker_position.img[0];
		img(2) = tracker_position.img[1];
		
		// IF VALID DATA, PREPARE VECTORS FOR MAP.
		if (tracker_position.valid)
		{
			map.Process (head, arm, img, predicted);

			AddRectangle (in_image, red, int(img(1)), int(img(2)), 15, 15);
			if (predicted(1) >= 0 && predicted(2) >= 0)
				AddRectangle (in_image, green, int(predicted(1)), int(predicted(2)), 15, 15);

			count++;
			if (count > 100)
			{
				map.Serialize ("kinesthesia.new.txt");
				count = 0;
			}

#ifdef _DEBUGX
			printf ("\n\n\n");
#endif
		}
		else
		{
			map.Predict (head, arm, predicted);

			if (predicted(1) >= 0 && predicted(2) >= 0)
				AddRectangle (in_image, green, int(predicted(1)), int(predicted(2)), 15, 15);

#ifdef _DEBUGX
			printf ("\n\n\n");
#endif
		}

		memset (&target_boxes, 0, sizeof(FiveBoxesInARow));

		if (predicted(1) >= 0 && predicted(2) >= 0)
		{
			// scale down the box position.
			// a way to reduce the feedback gain.
			int sx = int(predicted(1)+.5);
			int sy = int(predicted(2)+.5);

			// prepare boxes for attentional system?
			//memset (&target_boxes, 0, sizeof(FiveBoxesInARow));
			// imagine size = 30
			target_boxes(0).valid = true;
			target_boxes(0).total_sal = 0;
			target_boxes(0).total_pixels = 30 * 30;
			target_boxes(0).xsum = sx * 30 * 30;
			target_boxes(0).ysum = sy * 30 * 30;
			target_boxes(0).centroid_x = sx;
			target_boxes(0).centroid_y = sy;
			target_boxes(0).xmax = sx + 15;
			target_boxes(0).xmin = sx - 15;
			target_boxes(0).ymax = sy + 15;
			target_boxes(0).ymin = sy - 15;
		}

		YARPGenericImage& outImg = outt.Content();
		outImg.Refer(in_image);
		outt.Write();

		out_tracker.Content () = target_boxes;
		out_tracker.Write ();
	}
}
