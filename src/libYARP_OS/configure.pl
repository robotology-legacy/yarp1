#! /usr/bin/perl
#
#	--file <config_file>
#		where <config_file> is the filename of the context config file.
#

use Getopt::Long;
use File::Copy;

print "Entering configure process of YARP environment...\n";

chomp ($tmp = `ver`);
if (index ($tmp, "Windows") < 0)
{
	print "This is a Windows 2000/XP specific script\n";
	print "Perhaps this procedure can be simply extended to\n"; 
	print "other OSes but for now, this is all experimental...\n";
	
	die "This script is specific to Windows 2000/XP [version check reported: $tmp]\n";
}

$yarp_root = $ENV{'YARP_ROOT'};
if (!defined($yarp_root))
{
	die "YARP_ROOT environment variable must be defined!\nto point to the path of the yarp source distribution\n";
}

print "Ready to start...\n";

my $config_file = "$yarp_root/conf/context.conf";
my %options = ();

GetOptions ('file=s' => \$config_file );

if (-e $config_file)
{
	copy ($config_file, "$config_file.old");

	open CONFIG, $config_file or die "Can't open config file $!";

	my $contextual;
	while (<CONFIG>)
	{
		chomp;
		if (/^\[(\w+)\]$/)
		{
	#		print "Matched: $`<$&>$'\n";
			$contextual = $1;
		}
		elsif (/^([A-Za-z0-9_]+)= ?/)
		{
			$options{$contextual."<-".$1} = $';
		}
	}

	close CONFIG;
}

#
#
#

print "Now I'm going to ask a few questions to help the configuration\n";
print "So, let's start...\n";
print "For pathnames you can use (type) the pre-defined value \$YARP_ROOT\n";
print " that I've verified as: \"$yarp_root\"\n\n";
print "Please, use always the forward slash as a separator!\n";

print "I determined already that you're running on Windows\n";

get_option_hash ("Architecture<-OS", "winnt", "Just to make sure, what's your OS?");
get_option_hash ("Compile_OS<-ACE_PATH", "\$YARP_ROOT/src/ACE_wrappers", "Where has ACE been unpacked?");
get_option_hash ("Compile_OS<-ACE_Rebuild", "NO", "Do you want to rebuild ACE, i.e. clean before building?");

print "Would you like to set a default for library compilation?\n";
get_option_hash ("Compile_OS<-Lib_Clean", "FALSE", "Clean first: i.e. rebuild libraries?");
get_option_hash ("Compile_OS<-Lib_Debug", "FALSE", "Debug mode?");
get_option_hash ("Compile_OS<-Lib_Release", "FALSE", "Release mode (optimization on)?");
get_option_hash ("Compile_OS<-Lib_Install", "FALSE", "Install after compile?");
get_option_hash ("Compile_OS<-Tools_Rebuild", "YES", "Would you like to rebuild the YARP tools");
get_option_hash ("Compile_OS<-Tools_Debug", "FALSE", "Would you like to compile the tools for debugging?");

# consistency check.
if ($options{"Compile_OS<-Debug"} eq "FALSE" && 
	$options{"Compile_OS<-Release"} eq "FALSE" && 
	$options{"Compile_OS<-Clean"} eq "TRUE")
{
	print "Since you're rebuilding, you should at least select between debug and release\n";
	print "I'm assuming you wanted to compile debug\n";
	$options{"Compile_OS<-Debug"} = "TRUE";
}

if ($options{"Compile_OS<-Install"} eq "TRUE" &&
	$options{"Compile_OS<-Rebuild"} eq "FALSE")
{
	print "You need to recompile the tools since you're installing a new build of the libraries\n";
	print "I'm adding the tools compilation flag for you\n";
	$options{"Compile_OS<-Rebuild"} = "TRUE";
}

print "We're done for now, the context file is being created: \"$config_file\"\n";

#
# uses global value %options
#
sub get_option_hash
{
	my ($key, $default_value, $message) = @_;
	my $line = undef;

	$options{$key} = $default_value if (!exists($options{$key}));

	print "$message [$options{$key}] ";
	chomp($line = <STDIN>);
	$options{$key} = $line if (defined($line) && $line ne '');

	0;
}


#
# creating a new config file.
# 
open CONFIG, "> $config_file";
select CONFIG;

print "//\n";
print "// This is an example of configuration file.\n";
print "// - projects and include files are created relying on this options.\n";
print "//\n";
print "// Generated by <configure.pl>\n";
print "//\n";

my $context = '';
foreach my $key (sort keys %options)
{
	my $value = $options{$key};
	$key =~ /<-/;
	if ($context ne $`)
	{
		$context = $`;
		print "\n[$context]\n";
	}
	print "$'= $value\n";
}

select STDOUT;
close CONFIG;

print "Done!\n";